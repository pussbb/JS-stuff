// Generated by CoffeeScript 1.6.1
(function() {
  var Calendar, CalendarDay, CalendarDayEvent, CalendarDayEventsCollection, CalendarDayView, CalendarDaysCollection, CalendarException, CalendarMonthView, CalendarWeekView, calendarTemplate, dayTemplate, monthTemplate, weekTemplate,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  calendarTemplate = _.template('\
  <div class="clalendar-js">\
    <div class="header">\
        <div class="prev">\
            <button type="button" class="btn btn-default">\
                <span class="glyphicon glyphicon-arrow-left"></span>\
            </button>\
        </div>\
        <div class="content">\
            <span class="title">\
            </span>\
\
            <div class="btn-group pull-right">\
              <button type="button" class="btn btn-default view-month">\
                  Month View\
              </button>\
              <button type="button" class="btn btn-default view-week">\
                  Week View\
              </button>\
              <button type="button" class="btn btn-default view-day">\
                  Day View\
              </button>\
            </div>\
\
        </div>\
        <div class="next pull-right">\
            <button type="button" class="btn btn-default">\
                <span class="glyphicon glyphicon-arrow-right"></span>\
            </button>\
        </div>\
    </div>\
    <div class="calendar-container">\
    </div>\
  </div>\
');

  dayTemplate = _.template('\
<table class="table table-bordered">\
  <thead>\
    <tr>\
    </tr>\
  </thead>\
  <tbody>\
      <% nextDay = moment(now).add("d", 1); %>\
      <% while (now < nextDay) { %>\
        <tr class="week">\
            <td class="time">\
              <%= now.format("HH") %>\
              <% now.add("h", 1); %>\
            </td>\
            <td>\
                somthing\
            </td>\
        </tr>\
      <% }; %>\
  </tbody>\
  <tfoot>\
\
  </tfoot>\
</table>\
');

  monthTemplate = _.template('\
<table class="table table-bordered">\
  <thead>\
    <tr>\
        <% _.each(moment.weekdays(), function (name) {%>\
            <th>\
              <%= name %>\
            </th>\
        <% });%>\
    </tr>\
  </thead>\
  <tbody>\
  </tbody>\
  <tfoot>\
      <% i = 0; %>\
      <% while (startDay < endDate) { %>\
          <% if (i % 7 === 0) { %>\
              <tr>\
          <% } %>\
                  <td class="calendar-day">\
                      <%= startDay.format("DD-MM-YYYY") %>\
                  </td>\
          <% startDay.add("d", 1); %>\
          <% i++; %>\
          <% if (i % 7 === 0) { %>\
              </tr>\
          <% } %>\
      <% } %>\
\
  </tfoot>\
</table>\
');

  weekTemplate = _.template('\
<table class="table table-bordered">\
  <thead>\
    <tr>\
        <% startDay_ = moment(startDay); %>\
        <% while (startDay_ <= endDate) {%>\
            <th>\
              <%= startDay_.format("DD-MM-YYYY") %>\
              <% startDay_.add("d", 1); %>\
            </th>\
        <% }; %>\
    </tr>\
  </thead>\
  <tbody>\
      <tr class="week">\
        <% while (startDay <= endDate) { %>\
            <td class="day">\
              <%= startDay.format("DD-MM-YYYY") %>\
              <% startDay.add("d", 1); %>\
            </td>\
        <% }; %>\
      </tr>\
  </tbody>\
  <tfoot>\
\
  </tfoot>\
</table>\
');

  CalendarException = function(message, code) {
    var _this = this;
    this.message = message;
    this.code = code != null ? code : 10;
    this.name = "CalendarException";
    this.toString = function() {
      return "[" + _this.code + "] (" + _this.name + ") - " + _this.message;
    };
    return this;
  };

  Calendar = (function(_super) {

    __extends(Calendar, _super);

    function Calendar() {
      return Calendar.__super__.constructor.apply(this, arguments);
    }

    Calendar.VIEW_DAY = 1;

    Calendar.VIEW_WEEK = 2;

    Calendar.VIEW_MONTH = 3;

    Calendar.prototype.template = calendarTemplate;

    Calendar.prototype.events = {
      'click .header .content button[class*="view-"]': '_change_view_event'
    };

    Calendar.prototype.options = {
      viewType: Calendar.VIEW_WEEK,
      dayView: null,
      weekView: null,
      monthView: null,
      daysCollectionBaseURL: null,
      dayEventsCollectionBaseURL: null,
      days: [],
      weekStart: 0
    };

    Calendar.prototype.initialize = function(el, options) {
      var i, _i, _len, _ref;
      this.$el = el;
      if (_.isObject(options)) {
        this.options = _.extend(this.options, options);
      }
      if (this.options.daysCollectionBaseURL) {
        CalendarDaysCollection.baseURL = this.options.daysCollectionBaseURL;
      }
      if (this.options.dayEventsCollectionBaseURL) {
        CalendarDayEventsCollection.baseURL = this.options.dayEventsCollectionBaseURL;
      }
      this.options.daysCollection = new CalendarDaysCollection(this.options.days);
      if (!this.options.dayView) {
        this.options.dayView = new CalendarDayView({});
      }
      if (!this.options.weekView) {
        this.options.weekView = new CalendarWeekView;
      }
      if (!this.options.monthView) {
        this.options.monthView = new CalendarMonthView;
      }
      this.render();
      this.container = $('div.calendar-container', this.$el);
      _ref = ['dayView', 'weekView', 'monthView'];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        this.options[i].$el = this.container;
      }
      this.title = $('.header .content .title', this.$el);
      return this.refresh();
    };

    Calendar.prototype.render = function() {
      this.$el.html(this.template());
      return this;
    };

    Calendar.prototype.clear = function() {
      this.container.html('');
      return this;
    };

    Calendar.prototype.refresh = function(date) {
      var btnClassPrefix;
      this.clear();
      btnClassPrefix = null;
      switch (this.options.viewType) {
        case Calendar.VIEW_DAY:
          this._render_day(date);
          btnClassPrefix = "day";
          break;
        case Calendar.VIEW_WEEK:
          this._render_week(date);
          btnClassPrefix = "week";
          break;
        case Calendar.VIEW_MONTH:
          this._render_month(date);
          btnClassPrefix = "month";
          break;
        default:
          throw CalendarException('Not supported view type', 34);
      }
      $('.header .content button[class*="view-"]', this.$el).removeClass('btn-primary');
      $(".header .content button.view-" + btnClassPrefix, this.$el).addClass('btn-primary');
      return this;
    };

    Calendar.prototype.changeViewTo = function(type) {
      if (type == null) {
        type = Calendar.VIEW_MONTH;
      }
      if (type !== Calendar.VIEW_DAY && type !== Calendar.VIEW_WEEK && type !== Calendar.VIEW_MONTH) {
        throw CalendarException('Not supported view type', 34);
      }
      this.options.viewType = type;
      return this.refresh();
    };

    Calendar.prototype._change_view_event = function(e) {
      var $btn, type;
      $btn = $(e.target);
      type = null;
      if ($btn.hasClass('view-day')) {
        type = Calendar.VIEW_DAY;
      }
      if ($btn.hasClass('view-week')) {
        type = Calendar.VIEW_WEEK;
      }
      if ($btn.hasClass('view-month')) {
        type = Calendar.VIEW_MONTH;
      }
      return this.changeViewTo(type);
    };

    Calendar.prototype._render_month = function(date) {
      var now;
      now = moment(date).hours(12);
      this.title.html(now.format('MMMM YYYY'));
      this.options.monthView.refresh(now);
      return this;
    };

    Calendar.prototype._render_day = function(date) {
      var now;
      now = moment(date).hours(12);
      this.title.html(now.format('DD MMMM YYYY'));
      this.options.dayView.refresh(now);
      return this;
    };

    Calendar.prototype._render_week = function(date) {
      var now;
      now = moment(date).hours(12);
      this.title.html(now.format('MMMM gggg'));
      this.options.weekView.refresh(now);
      return this;
    };

    Calendar.prototype.option = function(name, value) {
      if (!value) {
        return this.options[name];
      }
      switch (name) {
        case 'viewType':
          return this.changeViewTo(value);
        default:
          return this.options[name] = value;
      }
    };

    return Calendar;

  })(Backbone.View);

  $(function() {
    var vv;
    $.fn.Calendar = function(options) {
      var $res, args, result;
      args = Array.prototype.slice.call(arguments, 1);
      result = [];
      $res = this.each(function() {
        var $el, obj, result_;
        $el = $(this);
        obj = $el.data('Calendar');
        if (!obj) {
          obj = new Calendar($el, options);
          $el.data('Calendar', obj);
          return;
        }
        if (jQuery.type(options) === !'string') {
          return;
        }
        if (!jQuery.isFunction(obj[options])) {
          result_ = obj[options];
        } else {
          result_ = obj[options].apply(obj, args);
        }
        return result.push(result_);
      });
      if (!result.length) {
        return $res;
      }
      if (result.length === 1) {
        result = result[0];
      }
      return result;
    };
    return vv = $('div.calendar').Calendar({
      'viewType': Calendar.VIEW_WEEK,
      'daysCollectionBaseURL': 'ddsfds'
    });
  });

  CalendarDay = (function(_super) {

    __extends(CalendarDay, _super);

    function CalendarDay() {
      return CalendarDay.__super__.constructor.apply(this, arguments);
    }

    CalendarDay.prototype.url = function() {
      return "" + CalendarDaysCollection.baseURL + "/" + this.id;
    };

    return CalendarDay;

  })(Backbone.Model);

  CalendarDaysCollection = (function(_super) {

    __extends(CalendarDaysCollection, _super);

    function CalendarDaysCollection() {
      return CalendarDaysCollection.__super__.constructor.apply(this, arguments);
    }

    CalendarDaysCollection.prototype.model = CalendarDay;

    CalendarDaysCollection.baseURL = null;

    CalendarDaysCollection.prototype.url = function() {
      return "" + CalendarDaysCollection.baseURL;
    };

    return CalendarDaysCollection;

  })(Backbone.Collection);

  CalendarDayEvent = (function(_super) {

    __extends(CalendarDayEvent, _super);

    function CalendarDayEvent() {
      return CalendarDayEvent.__super__.constructor.apply(this, arguments);
    }

    CalendarDayEvent.prototype.url = function() {
      return "" + CalendarDayEventsCollection.baseURL + "/" + this.id;
    };

    return CalendarDayEvent;

  })(Backbone.Model);

  CalendarDayEventsCollection = (function(_super) {

    __extends(CalendarDayEventsCollection, _super);

    function CalendarDayEventsCollection() {
      return CalendarDayEventsCollection.__super__.constructor.apply(this, arguments);
    }

    CalendarDayEventsCollection.prototype.model = CalendarDayEvent;

    CalendarDayEventsCollection.baseURL = null;

    CalendarDayEventsCollection.prototype.url = function() {
      return "" + CalendarDayEventsCollection.baseURL;
    };

    return CalendarDayEventsCollection;

  })(Backbone.Collection);

  CalendarDayView = (function(_super) {

    __extends(CalendarDayView, _super);

    function CalendarDayView() {
      return CalendarDayView.__super__.constructor.apply(this, arguments);
    }

    CalendarDayView.prototype.template = dayTemplate;

    CalendarDayView.prototype.refresh = function(now) {
      now.hours(0);
      return this.$el.html(this.template({
        'now': now
      }));
    };

    return CalendarDayView;

  })(Backbone.View);

  CalendarMonthView = (function(_super) {

    __extends(CalendarMonthView, _super);

    function CalendarMonthView() {
      return CalendarMonthView.__super__.constructor.apply(this, arguments);
    }

    CalendarMonthView.prototype.template = monthTemplate;

    CalendarMonthView.prototype.refresh = function(now) {
      var endDate, startDay;
      startDay = moment(now).date(-1);
      endDate = moment(startDay).week(startDay.week() + 5).endOf('week');
      return this.$el.html(this.template({
        'startDay': startDay,
        'endDate': endDate
      }));
    };

    return CalendarMonthView;

  })(Backbone.View);

  CalendarWeekView = (function(_super) {

    __extends(CalendarWeekView, _super);

    function CalendarWeekView() {
      return CalendarWeekView.__super__.constructor.apply(this, arguments);
    }

    CalendarWeekView.prototype.template = weekTemplate;

    CalendarWeekView.prototype.refresh = function(now) {
      var endDate, startDay;
      startDay = moment(now).startOf('week');
      endDate = moment(startDay).endOf('week');
      return this.$el.html(this.template({
        'startDay': startDay,
        'endDate': endDate
      }));
    };

    return CalendarWeekView;

  })(Backbone.View);

}).call(this);
