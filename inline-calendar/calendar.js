// Generated by CoffeeScript 1.6.1
(function() {
  var Calendar, Day,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Calendar = (function(_super) {

    __extends(Calendar, _super);

    function Calendar() {
      return Calendar.__super__.constructor.apply(this, arguments);
    }

    Calendar.VIEW_DAY = 1;

    Calendar.VIEW_WEEK = 2;

    Calendar.VIEW_MONTH = 3;

    Calendar.prototype.options = {
      viewType: Calendar.VIEW_WEEK
    };

    Calendar.prototype.initialize = function(el, options) {
      this.$el = el;
      if (_.isObject(options)) {
        return this.options = _.extend(this.options, options);
      }
    };

    Calendar.prototype.hello = function(msg) {
      return console.log(msg);
    };

    Calendar.prototype.option = function(name, value) {
      if (!value) {
        return this.options[name];
      }
      return this.options[name] = value;
    };

    return Calendar;

  })(Backbone.View);

  $(function() {
    var vv;
    $.fn.Calendar = function(options) {
      var args, result;
      args = Array.prototype.slice.call(arguments, 1);
      result = [];
      this.each(function() {
        var $this, data, result_;
        $this = $(this);
        result_ = $this.get();
        data = $this.data('Calendar');
        if (!data) {
          data = new Calendar($this, options);
          $this.data('Calendar', data);
        }
        if (_.isString(options)) {
          if (!_.isFunction(data[options])) {
            result_ = data[options];
          } else {
            result_ = data[options].apply(data, args);
          }
        }
        return result.push(result_);
      });
      if (result.length === 1) {
        result = result[0];
      }
      return result;
    };
    vv = $('div.calendar').Calendar({
      'ss': 'ss'
    });
    console.log(vv);
    vv = $('div.calendar').Calendar('option', 'viewType');
    console.log(vv);
    vv = $('div.calendar').Calendar('options');
    return console.log(vv);
  });

  Day = (function(_super) {

    __extends(Day, _super);

    function Day() {
      return Day.__super__.constructor.apply(this, arguments);
    }

    return Day;

  })(Model);

}).call(this);
