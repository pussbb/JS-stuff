// Generated by CoffeeScript 1.6.1
(function() {
  var Calendar, CalendarDay, CalendarDayEvent, CalendarDayEventsCollection, CalendarDayView, CalendarDaysCollection, CalendarException, CalendarMonthView, CalendarWeekView, calendarTemplate,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  calendarTemplate = _.template('\
<table class="table table-bordered">\
  <thead>\
    <tr>\
      <th class="prev">prev</th>\
      <th class="title">Calendar</th>\
      <th class="options">options</th>\
      <th class="next">next</th>\
    </tr>\
  </thead>\
  <tbody>\
  </tbody>\
  <tfoot>\
      <tr>\
\
      </tr>\
  </tfoot>\
</table>\
');

  CalendarException = function(message, code) {
    var _this = this;
    if (code == null) {
      code = 10;
    }
    this.message = message;
    this.code = code;
    this.name = "CalendarException";
    this.toString = function() {
      return "[" + _this.code + "] (" + _this.name + ") - " + _this.message;
    };
    return this;
  };

  Calendar = (function(_super) {

    __extends(Calendar, _super);

    function Calendar() {
      return Calendar.__super__.constructor.apply(this, arguments);
    }

    Calendar.VIEW_DAY = 1;

    Calendar.VIEW_WEEK = 2;

    Calendar.VIEW_MONTH = 3;

    Calendar.prototype.template = calendarTemplate;

    Calendar.prototype.options = {
      viewType: Calendar.VIEW_WEEK,
      dayView: null,
      weekView: null,
      monthView: null,
      daysCollectionBaseURL: null,
      dayEventsCollectionBaseURL: null,
      days: [],
      weekStart: 0
    };

    Calendar.prototype.initialize = function(el, options) {
      this.$el = el;
      if (_.isObject(options)) {
        this.options = _.extend(this.options, options);
      }
      if (this.options.daysCollectionBaseURL) {
        CalendarDaysCollection.baseURL = this.options.daysCollectionBaseURL;
      }
      if (this.options.dayEventsCollectionBaseURL) {
        CalendarDayEventsCollection.baseURL = this.options.dayEventsCollectionBaseURL;
      }
      this.options.daysCollection = new CalendarDaysCollection(this.options.days);
      if (!this.options.dayView) {
        this.options.dayView = new CalendarDayView;
      }
      if (!this.options.weekView) {
        this.options.weekView = new CalendarWeekView;
      }
      if (!this.options.monthView) {
        this.options.monthView = new CalendarMonthView;
      }
      this.render();
      return this.refresh();
    };

    Calendar.prototype.render = function() {
      this.$el.html(this.template());
      return this;
    };

    Calendar.prototype.clear = function() {
      $('tbody', this.$el).html('');
      return this;
    };

    Calendar.prototype.refresh = function(date) {
      this.clear();
      switch (this.options.viewType) {
        case Calendar.VIEW_DAY:
          this._render_day(date);
          break;
        case Calendar.VIEW_WEEK:
          this._render_week(date);
          break;
        case Calendar.VIEW_MONTH:
          this._render_month(date);
          break;
        default:
          throw CalendarException('Not supported view type', 34);
      }
      return this;
    };

    Calendar.prototype._render_month = function(date) {
      var $tbody, endDate, i, now, startDay, tr;
      now = moment(date).hours(12);
      startDay = moment(now).date(-1);
      endDate = moment(startDay).week(startDay.week() + 5).endOf('week');
      i = 0;
      $tbody = $('tbody', this.$el);
      $('th.title', this.$el).prop('colspan', 4);
      while (startDay < endDate) {
        if (i % 7 === 0) {
          tr = $('<tr>');
          $tbody.append(tr);
        }
        tr.append("<td>" + (startDay.format()) + "</td>");
        startDay.add('d', 1);
        i++;
      }
      return this;
    };

    Calendar.prototype._render_day = function() {
      return this;
    };

    Calendar.prototype._render_week = function() {
      return this;
    };

    Calendar.prototype.hello = function(msg) {
      return console.log(msg);
    };

    Calendar.prototype.option = function(name, value) {
      if (!value) {
        return this.options[name];
      }
      return this.options[name] = value;
    };

    return Calendar;

  })(Backbone.View);

  $(function() {
    var vv;
    $.fn.Calendar = function(options) {
      var $res, args, result;
      args = Array.prototype.slice.call(arguments, 1);
      result = [];
      $res = this.each(function() {
        var $el, obj, result_;
        $el = $(this);
        obj = $el.data('Calendar');
        if (!obj) {
          obj = new Calendar($el, options);
          $el.data('Calendar', obj);
          return;
        }
        if (jQuery.type(options) === !'string') {
          return;
        }
        if (!jQuery.isFunction(obj[options])) {
          result_ = obj[options];
        } else {
          result_ = obj[options].apply(obj, args);
        }
        return result.push(result_);
      });
      if (!result.length) {
        return $res;
      }
      if (result.length === 1) {
        result = result[0];
      }
      return result;
    };
    vv = $('div.calendar').Calendar({
      'viewType': Calendar.VIEW_MONTH,
      'daysCollectionBaseURL': 'ddsfds'
    });
    console.log(vv);
    vv.Calendar('hello', 'Hi');
    return console.log(vv.Calendar('options'));
  });

  CalendarDay = (function(_super) {

    __extends(CalendarDay, _super);

    function CalendarDay() {
      return CalendarDay.__super__.constructor.apply(this, arguments);
    }

    CalendarDay.prototype.url = function() {
      return "" + CalendarDaysCollection.baseURL + "/" + this.id;
    };

    return CalendarDay;

  })(Backbone.Model);

  CalendarDaysCollection = (function(_super) {

    __extends(CalendarDaysCollection, _super);

    function CalendarDaysCollection() {
      return CalendarDaysCollection.__super__.constructor.apply(this, arguments);
    }

    CalendarDaysCollection.prototype.model = CalendarDay;

    CalendarDaysCollection.baseURL = null;

    CalendarDaysCollection.prototype.url = function() {
      return "" + CalendarDaysCollection.baseURL;
    };

    return CalendarDaysCollection;

  })(Backbone.Collection);

  CalendarDayEvent = (function(_super) {

    __extends(CalendarDayEvent, _super);

    function CalendarDayEvent() {
      return CalendarDayEvent.__super__.constructor.apply(this, arguments);
    }

    CalendarDayEvent.prototype.url = function() {
      return "" + CalendarDayEventsCollection.baseURL + "/" + this.id;
    };

    return CalendarDayEvent;

  })(Backbone.Model);

  CalendarDayEventsCollection = (function(_super) {

    __extends(CalendarDayEventsCollection, _super);

    function CalendarDayEventsCollection() {
      return CalendarDayEventsCollection.__super__.constructor.apply(this, arguments);
    }

    CalendarDayEventsCollection.prototype.model = CalendarDayEvent;

    CalendarDayEventsCollection.baseURL = null;

    CalendarDayEventsCollection.prototype.url = function() {
      return "" + CalendarDayEventsCollection.baseURL;
    };

    return CalendarDayEventsCollection;

  })(Backbone.Collection);

  CalendarDayView = (function(_super) {

    __extends(CalendarDayView, _super);

    function CalendarDayView() {
      return CalendarDayView.__super__.constructor.apply(this, arguments);
    }

    return CalendarDayView;

  })(Backbone.View);

  CalendarMonthView = (function(_super) {

    __extends(CalendarMonthView, _super);

    function CalendarMonthView() {
      return CalendarMonthView.__super__.constructor.apply(this, arguments);
    }

    return CalendarMonthView;

  })(Backbone.View);

  CalendarWeekView = (function(_super) {

    __extends(CalendarWeekView, _super);

    function CalendarWeekView() {
      return CalendarWeekView.__super__.constructor.apply(this, arguments);
    }

    return CalendarWeekView;

  })(Backbone.View);

}).call(this);
